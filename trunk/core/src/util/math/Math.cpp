/*
SagaEngine library
Copyright (c) 2002-2006 Skalden Studio AS

This software is provided 'as-is', without any express or implied 
warranty. In no event will the authors be held liable for any 
damages arising from the use of this software.

Permission is granted to distribute the library under the terms of the 
Q Public License version 1.0. Be sure to read and understand the license
before using the library. It should be included here, or you may read it
at http://www.trolltech.com/products/qt/licenses/licensing/qpl

The original version of this library can be located at:
http://www.sagaengine.com/

Rune Myrland
rune@skalden.com
*/


#include "Math.hpp"
#include "sim/stat/Coor.hpp"
#include <cmath>

namespace se_core {
	/*

	short Math
	::clockwise8Direction(short xp, short yp) {
		const static short directions[][3] = {
			{ 4, 0, 5 },
			{ 3, 0, 1 },
			{ 7, 2, 6 }
		};

		short ns, ew;
		if(xp < -Coor::GRID_RES)
			ew = 0;
		else if(xp > Coor::GRID_RES)
			ew = 2;
		else
			ew = 1;

		if(yp < -Coor::GRID_RES)
			ns = 0;
		else if(yp > Coor::GRID_RES)
			ns = 2;
		else
			ns = 1;

		return directions[ ns ] [ ew ];
	}


	const short Math
	::sinesAbs[] = {
		0, 201, 401, 602, 802, 1002, 1202, 1400, // 0
		1598, 1794, 1990, 2184, 2378, 2569, 2759, 2948,
		3134, 3319, 3502, 3683, 3861, 4037, 4211, 4382,
		4551, 4717, 4879, 5039, 5196, 5350, 5501, 5648,
		5792, 5933, 6069, 6203, 6332, 6458, 6579, 6697, // 32
		6811, 6921, 7026, 7127, 7224, 7317, 7405, 7489,
		7568, 7643, 7713, 7778, 7839, 7895, 7946, 7992,
		8034, 8071, 8103, 8130, 8152, 8169, 8182, 8189,
		8192, 8189, 8182, 8169, 8152, 8130, 8103, 8071, // 64
		8034, 7992, 7946, 7895, 7839, 7778, 7713, 7643,
		7568, 7489, 7405, 7317, 7224, 7127, 7026, 6921,
		6811, 6697, 6579, 6458, 6332, 6203, 6069, 5933,
		5792, 5648, 5501, 5350, 5196, 5039, 4879, 4717, // 96
		4551, 4382, 4211, 4037, 3861, 3683, 3502, 3319,
		3134, 2948, 2759, 2569, 2378, 2184, 1990, 1794,
		1598, 1400, 1202, 1002, 802, 602, 401, 201,
		0, 201, 401, 602, 802, 1002, 1202, 1400, // 128
		1598, 1794, 1990, 2184, 2378, 2569, 2759, 2948,
		3134, 3319, 3502, 3683, 3861, 4037, 4211, 4382,
		4551, 4717, 4879, 5039, 5196, 5350, 5501, 5648,
		5792, 5933, 6069, 6203, 6332, 6458, 6579, 6697, // 160
		6811, 6921, 7026, 7127, 7224, 7317, 7405, 7489,
		7568, 7643, 7713, 7778, 7839, 7895, 7946, 7992,
		8034, 8071, 8103, 8130, 8152, 8169, 8182, 8189,
		8192, 8189, 8182, 8169, 8152, 8130, 8103, 8071, // 192
		8034, 7992, 7946, 7895, 7839, 7778, 7713, 7643,
		7568, 7489, 7405, 7317, 7224, 7127, 7026, 6921,
		6811, 6697, 6579, 6458, 6332, 6203, 6069, 5933,
		5792, 5648, 5501, 5350, 5196, 5039, 4879, 4717, // 224
		4551, 4382, 4211, 4037, 3861, 3683, 3502, 3319,
		3134, 2948, 2759, 2569, 2378, 2184, 1990, 1794,
		1598, 1400, 1202, 1002, 802, 602, 401, 201
	};


	const short Math
	::sinesSign[] = {
			1,  1,  1,  1,  1,  1,  1,  1, // 0
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1, // 32
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1, // 64
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1, // 96
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
			1,  1,  1,  1,  1,  1,  1,  1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 128
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 160
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 192
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 224
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1
	};


	const short Math
	::cosinesAbs[] = {
		8192, 8189, 8182, 8169, 8152, 8130, 8103, 8071, // 0
		8034, 7992, 7946, 7895, 7839, 7778, 7713, 7643,
		7568, 7489, 7405, 7317, 7224, 7127, 7026, 6921,
		6811, 6697, 6579, 6458, 6332, 6203, 6069, 5933,
		5792, 5648, 5501, 5350, 5196, 5039, 4879, 4717, // 32
		4551, 4382, 4211, 4037, 3861, 3683, 3502, 3319,
		3134, 2948, 2759, 2569, 2378, 2184, 1990, 1794,
		1598, 1400, 1202, 1002, 802, 602, 401, 201,
		0, 201, 401, 602, 802, 1002, 1202, 1400, // 64
		1598, 1794, 1990, 2184, 2378, 2569, 2759, 2948,
		3134, 3319, 3502, 3683, 3861, 4037, 4211, 4382,
		4551, 4717, 4879, 5039, 5196, 5350, 5501, 5648,
		5792, 5933, 6069, 6203, 6332, 6458, 6579, 6697, // 96
		6811, 6921, 7026, 7127, 7224, 7317, 7405, 7489,
		7568, 7643, 7713, 7778, 7839, 7895, 7946, 7992,
		8034, 8071, 8103, 8130, 8152, 8169, 8182, 8189,
		8192, 8189, 8182, 8169, 8152, 8130, 8103, 8071, // 128
		8034, 7992, 7946, 7895, 7839, 7778, 7713, 7643,
		7568, 7489, 7405, 7317, 7224, 7127, 7026, 6921,
		6811, 6697, 6579, 6458, 6332, 6203, 6069, 5933,
		5792, 5648, 5501, 5350, 5196, 5039, 4879, 4717, // 160
		4551, 4382, 4211, 4037, 3861, 3683, 3502, 3319,
		3134, 2948, 2759, 2569, 2378, 2184, 1990, 1794,
		1598, 1400, 1202, 1002, 802, 602, 401, 201,
		0, 201, 401, 602, 802, 1002, 1202, 1400, // 192
		1598, 1794, 1990, 2184, 2378, 2569, 2759, 2948,
		3134, 3319, 3502, 3683, 3861, 4037, 4211, 4382,
		4551, 4717, 4879, 5039, 5196, 5350, 5501, 5648,
		5792, 5933, 6069, 6203, 6332, 6458, 6579, 6697, // 224
		6811, 6921, 7026, 7127, 7224, 7317, 7405, 7489,
		7568, 7643, 7713, 7778, 7839, 7895, 7946, 7992,
		8034, 8071, 8103, 8130, 8152, 8169, 8182, 8189
	};


	const short Math
	::cosinesSign[] = {
		1,  1,  1,  1,  1,  1,  1,  1, // 0
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1, // 32
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1, -1, -1, -1, -1, -1, -1, -1, // 64
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 96
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 128
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, // 160
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1,
		-1,  1,  1,  1,  1,  1,  1,  1, // 192
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1, // 224
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1
	};


	const int Math
	::tangents[] = {
		0, 12, 25, 37, 50, 63, 75, 88, // 0
		101, 114, 128, 141, 155, 169, 183, 197,
		212, 226, 242, 257, 273, 290, 306, 324,
		342, 360, 379, 399, 420, 441, 464, 487,
		511, 537, 564, 593, 623, 656, 690, 726, // 32
		766, 808, 854, 903, 957, 1017, 1082, 1155,
		1236, 1327, 1430, 1549, 1687, 1850, 2044, 2280,
		2573, 2950, 3451, 4151, 5198, 6941, 10421, 20856,
		//8.36159454883603e+18,
		0x7fffffff, -20856, -10421, -6941, -5198, -4151, -3451, -2950, // 64
		-2573, -2280, -2044, -1850, -1687, -1549, -1430, -1327,
		-1236, -1155, -1082, -1017, -957, -903, -854, -808,
		-766, -726, -690, -656, -623, -593, -564, -537,
		-512, -487, -464, -441, -420, -399, -379, -360, // 96
		-342, -324, -306, -290, -273, -257, -242, -226,
		-212, -197, -183, -169, -155, -141, -128, -114,
		-101, -88, -75, -63, -50, -37, -25, -12,
		0, 12, 25, 37, 50, 63, 75, 88, // 128
		101, 114, 128, 141, 155, 169, 183, 197,
		212, 226, 242, 257, 273, 290, 306, 324,
		342, 360, 379, 399, 420, 441, 464, 487,
		511, 537, 564, 593, 623, 656, 690, 726, // 160
		766, 808, 854, 903, 957, 1017, 1082, 1155,
		1236, 1327, 1430, 1549, 1687, 1850, 2044, 2280,
		2573, 2950, 3451, 4151, 5198, 6941, 10421, 20856,
		//2.78719818294534e+18
		0x7fffffff, -20856, -10421, -6941, -5198, -4151, -3451, -2950, // 192
		-2573, -2280, -2044, -1850, -1687, -1549, -1430, -1327,
		-1236, -1155, -1082, -1017, -957, -903, -854, -808,
		-766, -726, -690, -656, -623, -593, -564, -537,
		-512, -487, -464, -441, -420, -399, -379, -360, // 224
		-342, -324, -306, -290, -273, -257, -242, -226,
		-212, -197, -183, -169, -155, -141, -128, -114,
		-101, -88, -75, -63, -50, -37, -25, -12
	};
	*/

}

